import javafx.application.Application;
import javafx.stage.Stage;

import java.io.File;
import java.io.PrintWriter;
import java.util.Scanner;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
import javafx.stage.Stage;


/**
 * 
 * A phone book application that allows you to add/modify/delete/browse as well as to look up entries.
 * The application obtains the added data information and saves it on to a separate text file.
 * The application starts to load the data from the text file 
 * When the application runs it reloads the data and when the application closes it saves the data back to the text file.
 * 
 * @author Joshua Agboola, Mahammad Arshad,Austin Maggs,Samin Ghousy
 *@version 7.0z Build 1.8.0_144 April 16, 2018
 */

public class GroupAssignment3 extends Application {
	/**
	 * GroupAssignment class that contains the structure for the Javafx:
	 * It contains the scene, controls, and nodes that will be used to store added data
	 * This class also contains a path to the text file that will save and load the data
	 
	 * 
	 * @param search the search is passed in the ObservableArrayList that will contain the search function that will rearrange the text displayed
	 * @param add the add is passed in the ObservableArrayList that will contain the add function to the text-field
	 *The observableArrayList will be used to contain the drop-down box that contains the add and search functionality
	 */	
	
	
	Label lbl1 = new Label("Phone Book");

	private TableView<Person> table = new TableView<Person>();

	Button load = new Button("Load Table");
	Button save = new Button("Save Table");
	Button delete = new Button("Delete");
	// Button add = new Button("Add");
	// Button search = new Button("Search");
	Button clear = new Button("Clear");
	Button back = new Button("Back to Table");

	TextField addfName = new TextField();
	TextField addlName = new TextField();
	TextField addnumber = new TextField();

	ObservableList<String> options = FXCollections.observableArrayList("Search", "Add");
	ComboBox<String> option = new ComboBox<>(options);

	private String dataFile = "c:/temp/phonebook.txt";

	final ObservableList<Person> people = FXCollections.observableArrayList();

	FilteredList<Person> searchResult = new FilteredList<>(people);

	@SuppressWarnings("unchecked")
	@Override
	public void start(Stage primaryStage) throws Exception {
		/**
		 * The start class will run and display the structure of the application and load the nodes
		 * The start will display the created objects and display it onto the pane 
		 * 
		 * @param primaryStage The primaryStage type Stage object will be passed in order for the application to run
		 * @param pane the pane object is created will be a type GridPane
		 * @param col1 is reference to the ColumnConstraints object that restrict the width of the scene 
		 * @param pane2 the pane2 will be used to set the vertical gap and the information for setting the dimensions of the pane
		 * @param e This value will be used in the lambda expression in setting the functionality for the save, clear, and load functions 
		 * @param f This reference for the file object, the file is instantiated when the class is entered 
		 * 
		 * @exception The exception throw in the start class will check to see if the data file is able to pass the data to the text file created
		 *  
		 * 
		 * 
		 */
		
		
		
		GridPane pane = new GridPane();
		pane.setHgap(10);
		GridPane pane2 = new GridPane();
		pane2.setVgap(5);
		pane.add(pane2, 1, 1);
		GridPane pane3 = new GridPane();
		pane3.setHgap(20);
		pane.add(pane3, 0, 3);
		GridPane pane4 = new GridPane();
		pane4.setHgap(5);
		pane.add(pane4, 0, 2);
		option.setMaxWidth(Double.MAX_VALUE);
		pane.add(option, 1, 2);
		option.setPromptText("Add or search");
		
		ColumnConstraints col1 = new ColumnConstraints();
		ColumnConstraints col2 = new ColumnConstraints();
		col2.setPercentWidth(20);

		pane.getColumnConstraints().addAll(col1, col2);
		// pane2.setGridLinesVisible(true);

		ColumnConstraints col1a = new ColumnConstraints();
		col1a.setPercentWidth(Double.MAX_VALUE);
		pane2.getColumnConstraints().add(col1a);
		pane2.setPrefWidth(Double.MAX_VALUE);
		GridPane.setHgrow(pane2, Priority.ALWAYS);

		load.setMaxWidth(Double.MAX_VALUE);
		pane2.add(load, 0, 0);
		delete.setMaxWidth(Double.MAX_VALUE);
		delete.setDisable(true);
		pane2.add(delete, 0, 4);
		save.setMaxWidth(Double.MAX_VALUE);
		save.setDisable(true);
		pane2.add(save, 0, 3);
		back.setMaxWidth(Double.MAX_VALUE);
		back.setDisable(true);
		pane2.add(back, 0, 5);
		clear.setMaxWidth(Double.MAX_VALUE);
		clear.setDisable(true);
		pane3.add(clear, 4, 0);

		pane.add(lbl1, 0, 0);

		addfName.setPromptText("First Name");

		addlName.setPromptText("Last Name");

		addnumber.setPromptText("Phone Number");

		pane4.add(addfName, 0, 0);
		pane4.add(addlName, 1, 0);
		pane4.add(addnumber, 2, 0);

		TableColumn<Person, String> fNamecol = new TableColumn<Person, String>("First Name");
		fNamecol.setCellValueFactory(new PropertyValueFactory<Person, String>("firstName"));

		TableColumn<Person, String> lNamecol = new TableColumn<Person, String>("Last Name");
		lNamecol.setCellValueFactory(new PropertyValueFactory<Person, String>("lastName"));

		TableColumn<Person, String> numbercol = new TableColumn<Person, String>("Phone Number");
		numbercol.setCellValueFactory(new PropertyValueFactory<Person, String>("phonenumber"));

		table.setEditable(true);
		table.setItems(people);
		table.getColumns().addAll(fNamecol, lNamecol, numbercol);
		table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
		pane.add(table, 0, 1);
		// pane.setGridLinesVisible(true);
		pane.setPadding(new Insets(5, 5, 5, 5));
		pane.setVgap(10);

		clear.setOnAction(e -> {
			addlName.clear();
			addfName.clear();
			addnumber.clear();
			option.getSelectionModel().clearSelection();
		});

		option.setOnAction(e -> {
			
			String fname = addfName.getText();
			String lname = addlName.getText();
			String phonenumber = addnumber.getText();	
			if(fname.matches("[0-9]+") || lname.matches("[0-9]+") || phonenumber.matches("[a-zA-Z]+")) {
				Alert alert = new Alert(AlertType.INFORMATION);
			    alert.setTitle("ERROR");
			    alert.setHeaderText(null);
			    alert.setContentText("Invalid perameter entered");
			    alert.showAndWait();
			}
		
			else if ("Add".equals(option.getValue())) {
				if (addfName.getText().equals("") || addlName.getText().equals("") || addnumber.getText().equals("")) {
					Alert alert = new Alert(AlertType.INFORMATION);
					alert.setTitle("Error");
					alert.setHeaderText("Incomplete Input");
					alert.setContentText("Please fill in all the textfield");
					alert.showAndWait();

				} else {
					people.add(new Person(fname, lname, phonenumber));
					
				}
								
			} else if ("Search".equals(option.getValue())) {
				if (!(fname.isEmpty())) {
					searchResult.setPredicate(p -> p.getFirstName().toLowerCase().equals(fname.toLowerCase()));
				}
				if (!(lname.isEmpty())) {
					searchResult.setPredicate(p -> p.getLastName().toLowerCase().equals(lname.toLowerCase()));
				}
				if (!(phonenumber.isEmpty())) {
					searchResult.setPredicate(p -> p.getPhonenumber().toLowerCase().equals(phonenumber.toLowerCase()));
				}
				table.setItems(searchResult);
			}
					
		});

		
		save.setOnAction(e -> {
			File f = new File(dataFile);
			try {
				if (!f.exists()) {
					f.createNewFile();
				}
				PrintWriter pw = new PrintWriter(f);
				for (Person c : people) {
					pw.printf("%s:%s:%s", c.getFirstName(), c.getLastName(), c.getPhonenumber());
					pw.println();
				}
				pw.close();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			Alert alert = new Alert(AlertType.INFORMATION,
					"data is saved in a file\nyou can close the \napplication now");
			alert.showAndWait();

		});

		load.setOnAction(e -> {
			table.getItems().clear();
			File f = new File(dataFile);
			try {
				if (!f.exists()) {
					f.createNewFile();
				}
				Scanner lines = new Scanner(f);
				if (!lines.hasNextLine()) {
					Alert alert = new Alert(AlertType.INFORMATION,
							"data file is empty\nenter a address and click save button");
					alert.showAndWait();
				} else {
					while (lines.hasNextLine()) {
						Scanner line = new Scanner(lines.nextLine());
						line.useDelimiter(":\\s*");
						people.add(new Person(line.next(), line.next(), line.next()));
						line.close();
					}
				}
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			load.setDisable(true);
			save.setDisable(false);
			delete.setDisable(false);
			clear.setDisable(false);
			back.setDisable(false);
		});

		back.setOnAction(e -> {
			table.setItems(people);
			option.getSelectionModel().clearSelection();
		});

		delete.setOnAction(e -> {
			people.remove(table.getSelectionModel().getSelectedItem());
		});

//		pane.setGridLinesVisible(true);
//		pane2.setGridLinesVisible(true);
//		pane3.setGridLinesVisible(true);
//		pane4.setGridLinesVisible(true);
		
		Scene scene = new Scene(pane, 600, 400);
		primaryStage.setTitle("Phonebook");
		primaryStage.setScene(scene);
		primaryStage.show();
	}

	/**
	 * The main method launches the stage for the Javafx phone-book application
	 * The method allows for the stage object to be created which contains the scene and controls for the phone-book application 
	 * The launch method is static with the command line parameter 
	 * @param args this variable parameter is passed in order to call application 
	 * @throws Exception the exception is thrown in case of possible errors in the run-time of launching the application
	 */
	
	public static void main(String[] args) throws Exception {
		launch(args);
	}

	
	
	/**
	 * The person class will contain the instances variables and data variables that will be used within the start class
	 * The Person class data will be used and created in the text-file. When loading the table, the person class will retain the information stored.
	 * 
	 * @param fName the reference variable holds the first name that has been added
	 * @param lName the reference variable holds the last name that has been added
	 * @param number the reference variable holds the String value for the phonenumber
	 * @return firstName the getter method for the instance variable firstName
	 *@return lastName the getter method for the instance variable lastName 
	 *@return phonenumber the getter method for the instance variable phonenumber
	 */
	public class Person {
		private String firstName;
		private String lastName;
		private String phonenumber;

		Person(String fName, String lName, String number) {
			this.firstName = fName;
			this.lastName = lName;
			this.phonenumber = number;
		}

		public String getFirstName() {
			return firstName;
		}

		public void setFirstName(String firstName) {
			this.firstName = firstName;
		}

		public String getLastName() {
			return lastName;
		}

		public void setLastName(String lastName) {
			this.lastName = lastName;
		}

		public String getPhonenumber() {
			return phonenumber;
		}

		public void setPhonenumber(String phonenumber) {
			this.phonenumber = phonenumber;
		}

	}
